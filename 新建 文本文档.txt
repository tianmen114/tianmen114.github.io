---
title: 美女视频
date: 2024-07-10 11:11:00
---

<style>
/* 响应式设计样式 */
#videoContainer {
  position: relative;
  text-align: center;
  margin-top: 20px;
}

#videoPlayer {
  width: 75%; /* 视频宽度100% */
  height: auto; /* 高度自适应 */
  max-width: 100%; /* 最大宽度100% */
}

.controlButtons {
  display: flex;
  justify-content: center;
  align-items: center;
  margin-top: 10px;
}

.controlButtons button {
  margin: 0 10px; /* 按钮间距 */
  background-color: #007bff;
  color: #fff;
  padding: 10px 20px;
  border: none;
  cursor: pointer;
  border-radius: 5px;
}

.controlButtons button:hover {
  background-color: #0056b3;
}

@media (max-width: 768px) {
  /* 小屏幕设备（如平板电脑）样式调整 */
  #videoContainer {
    margin-top: 10px;
  }
}

@media (max-width: 576px) {
  /* 较小的屏幕设备（如手机）样式调整 */
  #videoContainer {
    margin-top: 5px;
  }

  .controlButtons button {
    padding: 8px 16px; /* 进一步调整按钮内边距 */
    font-size: 14px; /* 缩小按钮文字大小 */
  }
}

/* 深色模式下的样式 */
@media (prefers-color-scheme: dark) {
  .messageBox {
    background-color: #333;
    color: #fff;
  }
}
</style>

<!-- 视频播放器 -->
<div id="videoContainer" class="center">
  <video id="videoPlayer" controls autoplay>
    <!-- 默认显示第一个视频 -->
    <source src="" type="video/mp4">
  </video>

  <!-- 控制按钮 -->
  <div class="controlButtons">
    <button id="previousButton">上一个视频</button>
    <button id="pauseButton">暂停</button>
    <button id="nextButton">下一个视频</button>
    <button id="downloadButton">下载视频</button>
    <button id="copyLinkButton">复制视频链接</button> <!-- 修改为复制视频链接按钮 -->
  </div>
</div>

<!-- 用户自定义API链接输入框和按钮 -->
<div class="center" style="margin-top: 20px;">
  <input type="text" id="api-url" placeholder="输入视频API链接">
  <button onclick="loadCustomVideo()">加载视频</button>
</div>

<!-- 美女视频清单 -->
<div id="videoList" class="center">
  <!-- 每个视频的链接，点击可以切换视频 -->
  <a href="#" class="video-item" data-video-src="http://api.yujn.cn/api/zzxjj.php?video=video1.mp4">视频api1</a>
  <a href="#" class="video-item" data-video-src="http://api.yujn.cn/api/zzxjj.php?video=video2.mp4">视频api2</a>
  <!-- 根据你的需求添加更多视频链接 -->
</div>

<script>
// 获取需要操作的元素
const videoPlayer = document.getElementById('videoPlayer');
const videoList = document.getElementById('videoList');
const nextButton = document.getElementById('nextButton');
const previousButton = document.getElementById('previousButton');
const pauseButton = document.getElementById('pauseButton');
const downloadButton = document.getElementById('downloadButton');
const copyLinkButton = document.getElementById('copyLinkButton'); // 新增的复制链接按钮
const apiUrlInput = document.getElementById('api-url');

// 获取所有视频链接
const videoLinks = videoList.getElementsByTagName('a');
let currentVideoIndex = 0; // 当前播放的视频索引

// 默认加载第一个视频链接
videoPlayer.src = videoLinks[0].getAttribute('data-video-src');

// 给视频列表容器添加点击事件委托
videoList.addEventListener('click', function(event) {
  event.preventDefault();
  if (event.target.classList.contains('video-item')) {
    // 获取链接中的视频源地址
    const videoSrc = event.target.getAttribute('data-video-src');

    // 更新视频播放器的视频源
    videoPlayer.src = videoSrc;

    // 自动播放新视频
    videoPlayer.play();

    // 更新当前播放的视频索引
    currentVideoIndex = Array.from(videoLinks).indexOf(event.target);

    // 滚动页面到视频播放器上方
    videoPlayer.scrollIntoView({ behavior: 'smooth', block: 'start' });
  }
});

// 预加载下一个视频的源地址
function preloadNextVideo() {
  const nextIndex = (currentVideoIndex + 1) % videoLinks.length;
  const nextVideoLink = videoLinks[nextIndex];
  const nextVideoSrc = nextVideoLink.getAttribute('data-video-src');
  const preloadVideo = new Audio(nextVideoSrc); // 使用 Audio 元素预加载视频
  preloadVideo.load();
}

// 给下一个视频按钮添加点击事件监听器
nextButton.addEventListener('click', function() {
  // 计算下一个视频的索引
  currentVideoIndex = (currentVideoIndex + 1) % videoLinks.length;

  // 获取下一个视频的链接和视频源地址
  const nextVideoLink = videoLinks[currentVideoIndex];
  const nextVideoSrc = nextVideoLink.getAttribute('data-video-src');

  // 更新视频播放器的视频源
  videoPlayer.src = nextVideoSrc;

  // 自动播放新视频
  videoPlayer.play();

  // 预加载下一个视频
  preloadNextVideo();

  // 滚动页面到视频播放器上方
  videoPlayer.scrollIntoView({ behavior: 'smooth', block: 'start' });
});

// 给上一个视频按钮添加点击事件监听器
previousButton.addEventListener('click', function() {
  // 计算上一个视频的索引
  currentVideoIndex = (currentVideoIndex - 1 + videoLinks.length) % videoLinks.length;

  // 获取上一个视频的链接和视频源地址
  const previousVideoLink = videoLinks[currentVideoIndex];
  const previousVideoSrc = previousVideoLink.getAttribute('data-video-src');

  // 更新视频播放器的视频源
  videoPlayer.src = previousVideoSrc;

  // 自动播放新视频
  videoPlayer.play();

  // 滚动页面到视频播放器上方
  videoPlayer.scrollIntoView({ behavior: 'smooth', block: 'start' });
});

// 给暂停按钮添加点击事件监听器
pauseButton.addEventListener('click', function() {
  if (videoPlayer.paused) {
    videoPlayer.play();
    pauseButton.textContent = '暂停';
  } else {
    videoPlayer.pause();
    pauseButton.textContent = '播放';
  }
});

// 给下载按钮添加点击事件监听器
downloadButton.addEventListener('click', function() {
  const videoSrc = videoPlayer.src;
  const a = document.createElement('a');
  a.href = videoSrc;
  a.download = 'video.mp4';
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
});

// 给复制视频链接按钮添加点击事件监听器
copyLinkButton.addEventListener('click', function() {
  const videoSrc = videoPlayer.src;
  
  // 创建一个临时的文本输入框
  const tempInput = document.createElement('input');
  tempInput.style.position = 'absolute';
  tempInput.style.left = '-9999px';
  tempInput.value = videoSrc;
  document.body.appendChild(tempInput);
  
  // 选中文本并复制
  tempInput.select();
  document.execCommand('copy');
  
  // 删除临时输入框
  document.body.removeChild(tempInput);
  
  // 提示复制成功
  alert('已复制视频链接：' + videoSrc);
});

// 加载用户自定义API链接视频
function loadCustomVideo() {
  const customApiUrl = apiUrlInput.value.trim();
  if (!customApiUrl) {
    alert('请输入视频API链接');
    return;
  }

  fetch(customApiUrl)
    .then(response => response.json())
    .then(data => {
      if (Array.isArray(data) && data.length > 0) {
        const firstVideoUrl = data[0].url; // 假设API返回的数据结构类似 { url: 'video_url.mp4' }
        playVideo(firstVideoUrl);
      } else {
        alert('API返回的视频数据格式不正确或为空');
      }
    })
    .catch(error => {
      console.error('无法加载视频', error);
      alert('加载视频失败');
    });
}

// 播放选定的视频
function playVideo(videoUrl) {
  videoPlayer.src = videoUrl;
  videoPlayer.play();
}
</script>
